<?php

namespace App\Modules\Api\Http\Controllers;

use App\Modules\Manage\Model\UserActiveModel;
use App\Modules\Manage\Model\UserActiveTeamModel;
use App\Modules\Manage\Model\UserGameModel;
use App\Modules\Manage\Model\UserTeamModel;
use App\Modules\Order\Model\OrderModel;
use App\Modules\Task\Model\DistrictRegionModel;
use App\Modules\User\Model\UserModel;
use Illuminate\Http\Request;
use App\Http\Controllers\ApiBaseController;
use Illuminate\Support\Facades\Crypt;
use Validator;
use DB;
use Cache;
use Lang;
use Redis;

class GameController extends ApiBaseController
{
    protected $uid;
    protected $school;
    protected $mobile;
    protected $username;

    public function __construct(Request $request)
    {
        $tokenInfo = Crypt::decrypt(urldecode($request->get('token')));
        //dd($tokenInfo);
        $this->uid = $tokenInfo['uid'];
        $this->school = $tokenInfo['school'];
        $this->username = $tokenInfo['name'];
        $this->mobile = $tokenInfo['mobile'];

    }

    /*public function getUserComplateInfo(Request $request)
    {
        $data['username'] = $this->username;
        $data['mobile'] = $this->mobile;
        $data['school'] = DistrictRegionModel::getDistrictName($this->school);

        return $this->formateResponse(1000,'信息填写成功',$data);
    }*/

    /**填写游戏信息（post:/game/userGameInfoCreate）
     * @param Request $request
     * @param game_server
     * @param game_name
     * @param type 1:个人；2：团队
     * @return \Illuminate\Http\Response
     */
    public function userGameInfoCreate(Request $request)
    {
        $date = $request->except('token');
        $validator = Validator::make($date,[
            'game_server' => 'required',
            'game_name' => 'required',
            'type'=>'required|integer'
        ],[
            'game_server.required' => '请填写游戏服务器',
            'game_name.required' => '请填写昵称',

            'type.required' => '请填写类别',
            'type.integer' => '整数哦',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $time = strtotime("now");
        $start_time = '2017-12-20';
        $end_time = '2018-01-30';

        if(strtotime($end_time) < $time){
            return $this->formateResponse(1001,'已过期，不能在填写信息');
        }

        $user = self::userInfoComplateCheck($this->uid,'user_id');
        if(!$user){
            return $this->formateResponse(1001,'请到个人中心补全学校信息或未实名认证');
        }

        $userGameInfo = UserGameModel::where('uid',$this->uid)->first();
        if(is_null($userGameInfo)){
            $data['game_server'] = $date['game_server'];
            $data['game_name'] = $date['game_name'];
            $data['uid'] = $this->uid;
            $data['school'] = $user->school;
            $data['mobile'] = $user->mobile;
            $data['user_no'] = OrderModel::randomCode($this->uid);

            $data = UserGameModel::createOne($data);
        }else{
            $data = $userGameInfo;
        }

        $data['username'] = $this->username;
        $data['schoolName'] = DistrictRegionModel::getDistrictName($data['school']);
        if($date['type'] == 1){
            $param = self::singleVSReport($data['user_no'],$this->uid);
            if($param['code'] == '1000'){
                $param['data'] = $data;
            }
        }

        if($date['type'] == 2){
            $where = [
                'type' => UserActiveModel::ACTIVE_TYPE_WX,
                'active_type' => 1,
                'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE,
                'uid' => $this->uid
            ];
            $user_active = UserActiveModel::userIsExist($where);

            $user_active_team = UserActiveTeamModel::where('captain_id',$this->uid)->first();
            if(!is_null($user_active_team) && is_null($user_active)){
                UserActiveTeamModel::where('captain_id',$this->uid)->delete();
                UserActiveModel::where('pid',$user_active_team->id)->delete();
            }

            if(is_null($user_active)){
                $param['code'] = '2000';
                $param['message'] = 'success';
                $param['data'] = $data;
            }else{
                $param = self::teamInfo($this->uid);
                return $this->formateResponse($param['code'],$param['message'],$param);
            }


        }

        return $this->formateResponse($param['code'],$param['message'],$param['data']);
    }

    //1v1
    static function singleVSReport($user_no,$uid)
    {
        $param['data'] = '';
        $time = strtotime("now");
        $start_time = '2017-12-20';
        $end_time = '2018-01-30';
        $user_game_info = UserGameModel::where('uid',$uid)->first();

        if($time < strtotime($start_time) || strtotime($end_time) < $time){
            $param['code'] = '1001';
            $param['message'] = '时间未到或已过期，不能报名';
            return $param;
        }
        if(is_null($user_game_info)){
            $param['code'] = '1001';
            $param['message'] = '请先完善游戏信息';
            return $param;
        }
        if($user_game_info->user_no != $user_no){
            $param['code'] = '1001';
            $param['message'] = '请上传自己的游戏编号';
            return $param;
        }

        $where = [
            'type' => UserActiveModel::ACTIVE_TYPE_WX,
            'active_type' => 1,
            'cantain' => UserActiveModel::ACTIVE_CANTAIN_ONE,
            'pid' => 0,
            'uid' => $uid
        ];
       $userActive = UserActiveModel::userIsExist($where);
        if(!is_null($userActive)){
            $param['code'] = '1001';
            $param['message'] = '您已报名，不能重复提交';
            return $param;
        }

        $data['uid'] = $uid;
        $data['cantain'] = UserActiveModel::ACTIVE_CANTAIN_ONE;
        $user_active = UserActiveModel::createOne($data);

        $param['code'] = '1000';
        $param['message'] = '报名成功';

        return $param;
        //return $this->formateResponse(1000,'报名成功',$data);

    }

    /**创建战队（post:/game/createTeam）
     * @param Request $request
     * @param team_name 战队名称
     * @param school 学校id
     * @param captain_name 队长名字
     * @param tel 队长电话
     * @param logo 战队logo
     * @return \Illuminate\Http\Response
     */
    public function createTeam(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'team_name' => 'required|unique:user_active_team,team_name|string|between:1,6',
        ],[
            'team_name.required' => '请输入战队名称',
            'team_name.unique' => '战队名称已存在',
            'team_name.string' => '请输入字符串',
            'team_name.between' => '战队名称长度 :min - :max 位',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $team = UserActiveTeamModel::where('captain_id',$this->uid)->first();
        if(!is_null($team)){
            return $this->formateResponse(1001,'您已创建战队，不能重新创建');
        }

        $where = [
            'type' => UserActiveModel::ACTIVE_TYPE_WX,
            'active_type' => 1,
            'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE,
            'uid' => $this->uid
        ];
        $user = UserActiveModel::userIsExist($where);
        if(!is_null($user)){
            return $this->formateResponse(1001,'您已加入其他战队，不能创建战队');
        }

        $data['captain_id'] = $this->uid;
        $user = self::userInfoComplateCheck($this->uid,'user_id');

        $where = [
            'uid'=>$user->id
        ];
        $userGameInfo = UserGameModel::userIsExist($where);

        if(is_null($userGameInfo)){
            return $this->formateResponse(1001,'请先完善游戏信息');
        }

        $data['captain_name'] = $this->username;
        $data['tel'] = $this->mobile;
        $data['school'] = $this->school;
        $data['user_no'] =$userGameInfo->user_no;

        if(isset($data['logo'])){
            $paths = self::uploadByBase64($data['logo'],$path = 'game');
            $data['logo'] = $paths['url_path'];
        }

        $team = DB::transaction(function () use($user,$data) {
            $team = UserActiveTeamModel::createOne($data);

            $param['uid'] = $this->uid;
            $param['cantain'] = UserActiveModel::ACTIVE_CANTAIN_FIVE;
            $param['pid'] = $team->id;
            $param['user_no'] = $data['user_no'];
            if(isset($data['logo'])){
                $param['user_no'] = $data['logo'];
            }
            UserActiveModel::createOne($param);
            return $team;
        });

        return $this->formateResponse(1000,'创建成功',$team);
    }

    /**战队列表（post:/game/teamList）
     * @param Request $request
     * @param limit
     * @param page_num
     * @return \Illuminate\Http\Response
     */
    public function teamList(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'limit' => 'required|integer',
            'page_num' => 'required|integer'
        ],[
            'limit.required' => '每页限制数量',
            'limit.integer' => '请上传整数',

            'page_num.required' => '页数',
            'page_num.integer' => '页数请上传整数',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }
        $offset = $data['limit'] * ($data['page_num'] -1);

        $userActiveTeams = new UserActiveTeamModel();
        if(isset($data['title']) && !empty($data['title'])){
            $userActiveTeams = $userActiveTeams->where('team_name','like','%'.$data['title'].'%');
        }
        $userActiveTeams =  $userActiveTeams->orderBy('id','desc')->limit($data['limit'])->offset($offset)->get();

        if(!$userActiveTeams->isEmpty()){
            foreach($userActiveTeams as $userActiveTeam){
                $userActiveTeam->total = UserActiveModel::getTeamPeopleTotal($userActiveTeam->id);
            }
            $userActiveTeams = $userActiveTeams->toArray();

        }else{
            return $this->formateResponse(2000,'暂无数据');
        }

        return $this->formateResponse(1000,'success',$userActiveTeams);
    }

    /**获取用户基本游戏信息(post:/game/userGameInfoByMobile)
     * @param Request $request
     * @param mobile
     * @return \Illuminate\Http\Response
     */
    public function userGameInfoByMobile(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'mobile' => 'required|mobile_phone',

        ],[
            'mobile.required' => '请输入邀请手机号',
            'mobile.mobile_phone' => '请输入正确手机号码格式',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $user = UserModel::getUserInfoByMobile($data['mobile']);
        $user_detail = UserModel::userInfo($user->id);

        if(is_null($user)){
            return $this->formateResponse(1001,'该用户还未注册或者激活，暂时无法获取基本信息');
        }
        $where = [
            'uid'=>$user->id
        ];
        $userGameInfo = UserGameModel::userIsExist($where);
        if(!is_null($userGameInfo)){
            $userGameInfo->name = $user->name;
            $userGameInfo->school = DistrictRegionModel::getDistrictName($user_detail->school);
            return $this->formateResponse(1000,'success',$userGameInfo);
        }

        return $this->formateResponse(2000,'该用户还未填写基本游戏信息',$user);
    }


    /**队长邀请队员(post:/game/inviteByCaptain)
     * @param Request $request
     * @param to_id
     * @return \Illuminate\Http\Response
     */
    public function inviteByCaptain(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'to_id' => 'required|integer',

        ],[
            'to_id.required' => 'uid不能为空',
            'to_id.integer' => '请输入整数',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $team = UserActiveTeamModel::getInfoByCaptainId($this->uid);
        if(is_null($team)){
            return $this->formateResponse(1001,'您还没有创建战队，不能进行相关操作');
        }
        if($data['to_id'] == $this->uid){
            return $this->formateResponse(1001,'亲，不能自己邀请自己哦');
        }

        $where = [
            'uid'=>$data['to_id'],
            'type' => UserActiveModel::ACTIVE_TYPE_WX,
            'active_type' => 1,
            'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE
        ];
        $team_member = UserActiveModel::userIsExist($where);

        if(!is_null($team_member)){
            return $this->formateResponse(1001,'该成员已加入战队，不能被邀请');
        }

        $team_member = UserActiveModel::getTeamPeopleTotal($team->id);
        if($team_member >=6){
            return $this->formateResponse(1001,'您的战队人数已满，不能邀请其他人参赛');
        }

        $data['form_id'] = $this->uid;
        $data['team_id'] = $team->id;
        $data['status'] = UserTeamModel::USER_TEAM_APPLY;

        UserTeamModel::createOne($data);

        return $this->formateResponse(1000,'邀请成功');
    }

    /**队友接收邀请列表(post:/game/inviteInfoList)
     * @param Request $request
     * @param limit
     * @param page_num
     * @return \Illuminate\Http\Response
     */
    public function inviteInfoList(Request $request)
    {
        $data = $request->except('token');

        $invite_teams = UserTeamModel::where('to_id',$this->uid)->whereStatus(UserTeamModel::USER_TEAM_APPLY)->get();
        //dd($invite_teams);
        if(!$invite_teams->isEmpty()){
            $user_active_team_type = UserActiveTeamModel::where('captain_id',$this->uid)->first();
            foreach($invite_teams as $invite_team){
                $user_active_team = UserActiveTeamModel::whereId($invite_team->team_id)->first();
                $user = UserModel::whereId($invite_team->form_id)->first();
                $invite_team->user_name = $user->name;
                $invite_team->mobile = $user->mobile;
                $invite_team->status_name = UserTeamModel::getStatusCN($invite_team->status);
                $invite_team->team_name = $user_active_team->team_name;
                if(is_null($user_active_team_type)){
                    $invite_team->title = $user->name.$user->mobile.'邀请您加入';
                    $invite_team->type = 1;
                }else{
                    $invite_team->title = $user->name.$user->mobile.'申请加入';
                    $invite_team->type = 2;
                }
            }
            $invite_teams = $invite_teams->toArray();
        }else{
            return $this->formateResponse(2000,'暂无数据');
        }

        return $this->formateResponse(1000,'success',$invite_teams);
    }


    /**
     * 游客同意/拒绝某条邀请(post:/game/playerAgree)
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function playerAgree(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'agree_id' => 'required',
            'attitude' => 'required|integer',
        ],[
            'agree_id.required' => '请输入战队编号',

            'attitude.required' => '请输入选择参数',
            'attitude.integer' => '请输入整数',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $user_team = UserTeamModel::whereId($data['agree_id'])->whereStatus(UserTeamModel::USER_TEAM_APPLY)->first();
        $user_active_info = UserGameModel::whereUid($this->uid)->first();

        if(is_null($user_team)){
            return $this->formateResponse(1001,'该邀请已不存在');
        }
        if($user_team->to_id != $this->uid){
            return $this->formateResponse(1001,'您不是受邀请的玩家，不能进行相关操作');
        }
        if($data['attitude'] == 2 && is_null($user_active_info)){
            return $this->formateResponse(1001,'请先完善游戏信息');
        }

        if($data['attitude'] == 1){//拒绝
            UserTeamModel::whereId($data['agree_id'])->update(['status'=>UserTeamModel::USER_TEAM_REFUSE]);
            return $this->formateResponse(1000,'已拒绝');
        }

        $where = [
            'uid'=>$this->uid,
            'type' => UserActiveModel::ACTIVE_TYPE_WX,
            'active_type' => 1,
            'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE
        ];
        $user_active = UserActiveModel::userIsExist($where);

        if(!is_null($user_active)){
            return $this->formateResponse(1001,'您已加入其他战队，不能进行相关操作');
        }

        $user_active_team = UserActiveTeamModel::whereId($user_team->team_id)->first();
        if(is_null($user_active_team)){
            UserTeamModel::whereId($data['agree_id'])->delete();
            return $this->formateResponse(1001,'您加入的战队已不存在');
        }

        if($data['attitude'] == 2){
            $param['uid'] = $this->uid;
            $param['cantain'] = UserActiveModel::ACTIVE_CANTAIN_FIVE;
            $param['pid'] = $user_team->team_id;
            $param['user_no'] = $user_active_info->user_no;
            UserActiveModel::createOne($param);
            UserTeamModel::whereId($data['agree_id'])->update(['status'=>UserTeamModel::USER_TEAM_AGREE]);
        }

        return $this->formateResponse(1000,'您已加入战队');
    }

    /**5v5报名(post:/game/joinInTeam)
     * @param Request $request
     * @param team_id
     * @return \Illuminate\Http\Response
     */
    public function joinInTeam(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'team_id' => 'required|integer',

        ],[
            'team_id.required' => '请输入战队编号',
            'team_id.integer' => '请输入整数',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $team = UserActiveTeamModel::getInfoById($data['team_id']);
        $userActive = UserActiveModel::where('uid',$this->uid)->where('cantain',UserActiveModel::ACTIVE_CANTAIN_FIVE)->first();

        if(!is_null($userActive)){
            return $this->formateResponse(1001,'您已申请其他战队');
        }

        if($team->status == UserActiveTeamModel::TEAM_STATUS_OPEN){
            $userTeams = UserTeamModel::where('team_id',$data['team_id'])->where('form_id',$this->uid)->where('status',UserTeamModel::USER_TEAM_AGREE)->first();
            if(!is_null($userTeams)){
                return $this->formateResponse(1001,'您已申请过该战队，不能重复申请');
            }
            $param = [
                'team_id'=>$data['team_id'],
                'form_id'=>$this->uid,
                'status'=> UserTeamModel::USER_TEAM_APPLY,
                'to_id'=>$team->captain_id
            ];
            //dd($param);
            UserTeamModel::createOne($param);

        }
        return $this->formateResponse(1000,'申请成功，等待审核');
        /*if($team->status == UserActiveTeamModel::TEAM_STATUS_CLOSE){
            $team_person_num = UserActiveModel::where('pid',$data['team_id'])->count();
            if($team_person_num > 6){
                return $this->formateResponse(1001,'队伍人数已满，请选择其他战队');
            }
            $param = [
                'team_id'=>$data['team_id'],
                'uid'=>$this->uid,
                'status'=> UserTeamModel::USER_TEAM_AGREE
            ];
            UserTeamModel::createOne($param);
            $msg = '恭喜您已加入战队';
        }*/
    }

    /**队长审核加入(post:/game/captainAgreeApply)
     * @param Request $request
     * @param agree_id 申请id
     * @return \Illuminate\Http\Response
     */
    public function captainAgreeApply(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'agree_id' => 'required',
            'attitude' => 'required|integer',
        ],[
            'agree_id.required' => '请输入战队编号',

            'attitude.required' => '请输入选择参数',
            'attitude.integer' => '请输入整数',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $user_team = UserTeamModel::whereId($data['agree_id'])->whereStatus(UserTeamModel::USER_TEAM_APPLY)->first();
        if (is_null($user_team)) {
            return $this->formateResponse(1001,'该申请已失效');
        }
        $user_active_team = UserActiveTeamModel::where('captain_id', $this->uid)->whereId($user_team->team_id)->first();
        $user_active_info = UserGameModel::whereUid($user_team->form_id)->first();

        if (is_null($user_active_team)) {
            return $this->formateResponse(1001,'您不是战队队长，无权操作');
        }
        if($data['attitude'] == 2 && is_null($user_active_info)){
            return $this->formateResponse(1001,'该队员游戏信息不全，不能通过');
        }

        if($data['attitude'] == 1){//拒绝
            UserTeamModel::whereId($data['agree_id'])->update(['status'=>UserTeamModel::USER_TEAM_REFUSE]);
            return $this->formateResponse(1000,'已拒绝');
        }
        $where = [
            'uid'=>$user_team->form_id,
            'type' => UserActiveModel::ACTIVE_TYPE_WX,
            'active_type' => 1,
            'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE
        ];
        $user_active = UserActiveModel::userIsExist($where);

        if(!is_null($user_active)){
            UserTeamModel::whereId($data['agree_id'])->update(['status'=>UserTeamModel::USER_TEAM_REFUSE]);
            return $this->formateResponse(1001,'该成员已加入其他战队');
        }

        $param['uid'] = $user_team->form_id;
        $param['cantain'] = UserActiveModel::ACTIVE_CANTAIN_FIVE;
        $param['pid'] = $user_team->team_id;
        $param['user_no'] = $user_active_info->user_no;
        UserActiveModel::createOne($param);
        UserTeamModel::whereId($data['agree_id'])->update(['status'=>UserTeamModel::USER_TEAM_AGREE]);


        if(empty($error)){
            return $this->formateResponse(1000,'操作成功');
        }
        return $this->formateResponse(1001,$error['message']);
    }

    /**退出战队(post:/game/quitTeam)
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function quitTeam(Request $request)
    {
        $where = [
            'uid'=>$this->uid,
            'type' => UserActiveModel::ACTIVE_TYPE_WX,
            'active_type' => 1,
            'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE
        ];
        $user_avtive = UserActiveModel::userIsExist($where);

        if(is_null($user_avtive)){
            return $this->formateResponse(1001,'您暂无加入战队，无法进行相关操作');
        }

        $user_active_team = UserActiveTeamModel::where('captain_id',$this->uid)->first();

        if(is_null($user_active_team)){
            UserActiveModel::where('uid',$this->uid)->delete();
        }

        if(!is_null($user_active_team)){//队长

            DB::transaction(function () use($user_active_team) {
                UserActiveModel::where('pid', $user_active_team->id)->delete();
                UserTeamModel::where('team_id', $user_active_team->id)->delete();
                UserActiveTeamModel::whereId($user_active_team->id)->delete();
            });
            return $this->formateResponse(1000,'战队已解散');
        }

        return $this->formateResponse(1000,'退出成功');
    }

    /**战队信息(post:/game/teamInfo)
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    static public function teamInfo($u_id)
    {
        $pid = UserActiveModel::whereUid($u_id)->where('pid','!=',0)->where('cantain',UserActiveModel::ACTIVE_CANTAIN_FIVE)->pluck('pid');
        if(empty($pid)){
            //return $this->formateResponse(2000,'暂无信息');
        }

        $uid = UserActiveModel::where('cantain',UserActiveModel::ACTIVE_CANTAIN_FIVE)->wherePid($pid)->lists('uid');
        $data =  UserGameModel::getUserInfo($uid);

        $param['user_active_team'] = UserActiveTeamModel::getInfoByCaptainId($u_id);
        //dd( $param['user_active_team']);
        $param['identify'] = 1;
        if(!is_null($param['user_active_team'])){
            $param['identify'] = 2;//队长
        }

        $param['code'] = 1000;
        $param['message'] = 'success';
        $param['data'] = $data;
        return $param;
        //return $this->formateResponse(1000,'success',$data);
    }

    /**删除队员(post:/game/delGroup)
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function delGroup(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'uid' => 'required|integer',
        ],[
            'uid.required' => '请输入队员id',
            'uid.integer' => '请输入整数',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        $captain = UserActiveTeamModel::where('captain_id',$this->uid)->first();

        if(is_null($captain)){
            return $this->formateResponse(1001,'您不是队长，无权进行此项操作');
        }
        if($captain->captain_id != $this->uid){
            return $this->formateResponse(1001,'您不是队长，无权进行此项操作');
        }
        if($data['uid'] == $this->uid){
            return $this->formateResponse(1001,'不能自己删除自己哦，亲');
        }


        UserActiveModel::where('pid', $captain->id)->where('uid', $data['uid'])->delete();
        UserTeamModel::where('form_id', $data['uid'])->where('to_id', $this->uid)->delete();


        return $this->formateResponse(1000,'成功');
    }

    //测试添加队员
    /**
     * (post:/game/testCreateGroup)
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function testCreateGroup(Request $request)
    {
        $num = $request->input('num',1);

        $where = [
            'uid'=>$this->uid,
            'type' => UserActiveModel::ACTIVE_TYPE_WX,
            'active_type' => 1,
            'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE
        ];
        $user_active = UserActiveModel::userIsExist($where);
        if(is_null($user_active)){
            return $this->formateResponse(1001,'fail');
        }

        $total = UserActiveModel::getTeamPeopleTotal($user_active->pid);

        if($num + $total > 6){
            return $this->formateResponse(1001,'人数过多');
        }

        $user_ids = UserModel::lists('id')->toArray();
        //dd((array)$this->uid);
        $param = array_diff($user_ids, (array)$this->uid);
        $uid = array_slice($param,0,$num);

        foreach($uid as $v){
            $where = [
                'uid'=>$v
            ];
            UserGameModel::where('uid',$v)->delete();
            UserActiveModel::where('uid',$v)->delete();

            $data['game_server'] = '微信1区';
            $data['game_name'] = 'haha';
            $data['uid'] = $v;
            $data['school'] = 87;
            $data['mobile'] = 123456;
            $data['user_no'] = OrderModel::randomCode($v);

            $user_game_info = UserGameModel::createOne($data);

            $param['uid'] = $v;
            $param['cantain'] = UserActiveModel::ACTIVE_CANTAIN_FIVE;
            $param['pid'] = $user_active->pid;
            $param['user_no'] = $user_game_info->user_no;
            UserActiveModel::createOne($param);
        }

        return $this->formateResponse(1000,'success');
    }


    public function singleGroup(Request $request)
    {
        $data = $request->except('token');
        $validator = Validator::make($data,[
            'type' => 'required|integer',
        ],[
            'type.required' => '抽签类型',
            'type.integer' => '请输入整数',
        ]);

        $error = $validator->errors()->all();
        if(count($error)){
            return $this->formateResponse(1001,$error[0], $error);
        }

        if($data['type'] == 0){//1v1
            $where = [
                'uid'=>$this->uid,
                'type' => UserActiveModel::ACTIVE_TYPE_WX,
                'active_type' => 1,
                'cantain' => UserActiveModel::ACTIVE_CANTAIN_FIVE
            ];
            $user_active = UserActiveModel::userIsExist($where);
            if(!Redis::ZSCORE('single',$this->uid) && $user_active->group_id == 0){
                //$array = ['A'=>[1,2,3,4,5,6],'B'=>[1,2,3,4,5,6],'C'=>[1,2,3,4,5,6],'D'=>[1,2,3,4,5,6]];
                $array = Cache::get('single');
                $key = array_rand($array);
                $param = array_rand($array[$key]);
                $value = $array[$key][$param];

                // Redis::zincrby('single ',$value,$this->uid);
                $message = '您的分组是'.$key.'组'.$value.'号';
                unset($array[$key][$param]);
                //dd($array);
                Cache::put('single',$array,60*1);
                $array = Cache::get('single');
                dd($array);
                // Redis::del('group');
                return $this->formateResponse(1000,$message);
            }

            return $this->formateResponse(1001,'您已抽签，不能重复操作');

        }
    }

}